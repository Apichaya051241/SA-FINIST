// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Yui/app/ent/drug"
	"github.com/Yui/app/ent/registerstore"
	"github.com/Yui/app/ent/store"
	"github.com/Yui/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Registerstore is the model entity for the Registerstore schema.
type Registerstore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RegisterstoreQuery when eager-loading is set.
	Edges        RegisterstoreEdges `json:"edges"`
	drug_drugs   *int
	store_stores *int
	user_users   *int
}

// RegisterstoreEdges holds the relations/edges for other nodes in the graph.
type RegisterstoreEdges struct {
	// Store holds the value of the store edge.
	Store *Store
	// User holds the value of the user edge.
	User *User
	// Drug holds the value of the drug edge.
	Drug *Drug
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RegisterstoreEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[0] {
		if e.Store == nil {
			// The edge store was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RegisterstoreEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DrugOrErr returns the Drug value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RegisterstoreEdges) DrugOrErr() (*Drug, error) {
	if e.loadedTypes[2] {
		if e.Drug == nil {
			// The edge drug was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: drug.Label}
		}
		return e.Drug, nil
	}
	return nil, &NotLoadedError{edge: "drug"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Registerstore) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // amount
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Registerstore) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // drug_drugs
		&sql.NullInt64{}, // store_stores
		&sql.NullInt64{}, // user_users
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Registerstore fields.
func (r *Registerstore) assignValues(values ...interface{}) error {
	if m, n := len(values), len(registerstore.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field amount", values[0])
	} else if value.Valid {
		r.Amount = int(value.Int64)
	}
	values = values[1:]
	if len(values) == len(registerstore.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field drug_drugs", value)
		} else if value.Valid {
			r.drug_drugs = new(int)
			*r.drug_drugs = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field store_stores", value)
		} else if value.Valid {
			r.store_stores = new(int)
			*r.store_stores = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_users", value)
		} else if value.Valid {
			r.user_users = new(int)
			*r.user_users = int(value.Int64)
		}
	}
	return nil
}

// QueryStore queries the store edge of the Registerstore.
func (r *Registerstore) QueryStore() *StoreQuery {
	return (&RegisterstoreClient{config: r.config}).QueryStore(r)
}

// QueryUser queries the user edge of the Registerstore.
func (r *Registerstore) QueryUser() *UserQuery {
	return (&RegisterstoreClient{config: r.config}).QueryUser(r)
}

// QueryDrug queries the drug edge of the Registerstore.
func (r *Registerstore) QueryDrug() *DrugQuery {
	return (&RegisterstoreClient{config: r.config}).QueryDrug(r)
}

// Update returns a builder for updating this Registerstore.
// Note that, you need to call Registerstore.Unwrap() before calling this method, if this Registerstore
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Registerstore) Update() *RegisterstoreUpdateOne {
	return (&RegisterstoreClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Registerstore) Unwrap() *Registerstore {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Registerstore is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Registerstore) String() string {
	var builder strings.Builder
	builder.WriteString("Registerstore(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", r.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// Registerstores is a parsable slice of Registerstore.
type Registerstores []*Registerstore

func (r Registerstores) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
