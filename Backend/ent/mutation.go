// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/Yui/app/ent/drug"
	"github.com/Yui/app/ent/registerstore"
	"github.com/Yui/app/ent/store"
	"github.com/Yui/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDrug          = "Drug"
	TypeRegisterstore = "Registerstore"
	TypeStore         = "Store"
	TypeUser          = "User"
)

// DrugMutation represents an operation that mutate the Drugs
// nodes in the graph.
type DrugMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	drugs         map[int]struct{}
	removeddrugs  map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Drug, error)
}

var _ ent.Mutation = (*DrugMutation)(nil)

// drugOption allows to manage the mutation configuration using functional options.
type drugOption func(*DrugMutation)

// newDrugMutation creates new mutation for $n.Name.
func newDrugMutation(c config, op Op, opts ...drugOption) *DrugMutation {
	m := &DrugMutation{
		config:        c,
		op:            op,
		typ:           TypeDrug,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDrugID sets the id field of the mutation.
func withDrugID(id int) drugOption {
	return func(m *DrugMutation) {
		var (
			err   error
			once  sync.Once
			value *Drug
		)
		m.oldValue = func(ctx context.Context) (*Drug, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Drug.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDrug sets the old Drug of the mutation.
func withDrug(node *Drug) drugOption {
	return func(m *DrugMutation) {
		m.oldValue = func(context.Context) (*Drug, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DrugMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DrugMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DrugMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *DrugMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DrugMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Drug.
// If the Drug object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DrugMutation) ResetName() {
	m.name = nil
}

// AddDrugIDs adds the drugs edge to Registerstore by ids.
func (m *DrugMutation) AddDrugIDs(ids ...int) {
	if m.drugs == nil {
		m.drugs = make(map[int]struct{})
	}
	for i := range ids {
		m.drugs[ids[i]] = struct{}{}
	}
}

// RemoveDrugIDs removes the drugs edge to Registerstore by ids.
func (m *DrugMutation) RemoveDrugIDs(ids ...int) {
	if m.removeddrugs == nil {
		m.removeddrugs = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddrugs[ids[i]] = struct{}{}
	}
}

// RemovedDrugs returns the removed ids of drugs.
func (m *DrugMutation) RemovedDrugsIDs() (ids []int) {
	for id := range m.removeddrugs {
		ids = append(ids, id)
	}
	return
}

// DrugsIDs returns the drugs ids in the mutation.
func (m *DrugMutation) DrugsIDs() (ids []int) {
	for id := range m.drugs {
		ids = append(ids, id)
	}
	return
}

// ResetDrugs reset all changes of the "drugs" edge.
func (m *DrugMutation) ResetDrugs() {
	m.drugs = nil
	m.removeddrugs = nil
}

// Op returns the operation name.
func (m *DrugMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Drug).
func (m *DrugMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DrugMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, drug.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DrugMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case drug.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DrugMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case drug.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Drug field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) SetField(name string, value ent.Value) error {
	switch name {
	case drug.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DrugMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DrugMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Drug numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DrugMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DrugMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DrugMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Drug nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DrugMutation) ResetField(name string) error {
	switch name {
	case drug.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DrugMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.drugs != nil {
		edges = append(edges, drug.EdgeDrugs)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DrugMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case drug.EdgeDrugs:
		ids := make([]ent.Value, 0, len(m.drugs))
		for id := range m.drugs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DrugMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddrugs != nil {
		edges = append(edges, drug.EdgeDrugs)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DrugMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case drug.EdgeDrugs:
		ids := make([]ent.Value, 0, len(m.removeddrugs))
		for id := range m.removeddrugs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DrugMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DrugMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DrugMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Drug unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DrugMutation) ResetEdge(name string) error {
	switch name {
	case drug.EdgeDrugs:
		m.ResetDrugs()
		return nil
	}
	return fmt.Errorf("unknown Drug edge %s", name)
}

// RegisterstoreMutation represents an operation that mutate the Registerstores
// nodes in the graph.
type RegisterstoreMutation struct {
	config
	op            Op
	typ           string
	id            *int
	amount        *int
	addamount     *int
	clearedFields map[string]struct{}
	store         *int
	clearedstore  bool
	user          *int
	cleareduser   bool
	drug          *int
	cleareddrug   bool
	done          bool
	oldValue      func(context.Context) (*Registerstore, error)
}

var _ ent.Mutation = (*RegisterstoreMutation)(nil)

// registerstoreOption allows to manage the mutation configuration using functional options.
type registerstoreOption func(*RegisterstoreMutation)

// newRegisterstoreMutation creates new mutation for $n.Name.
func newRegisterstoreMutation(c config, op Op, opts ...registerstoreOption) *RegisterstoreMutation {
	m := &RegisterstoreMutation{
		config:        c,
		op:            op,
		typ:           TypeRegisterstore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRegisterstoreID sets the id field of the mutation.
func withRegisterstoreID(id int) registerstoreOption {
	return func(m *RegisterstoreMutation) {
		var (
			err   error
			once  sync.Once
			value *Registerstore
		)
		m.oldValue = func(ctx context.Context) (*Registerstore, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Registerstore.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRegisterstore sets the old Registerstore of the mutation.
func withRegisterstore(node *Registerstore) registerstoreOption {
	return func(m *RegisterstoreMutation) {
		m.oldValue = func(context.Context) (*Registerstore, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RegisterstoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RegisterstoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RegisterstoreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAmount sets the amount field.
func (m *RegisterstoreMutation) SetAmount(i int) {
	m.amount = &i
	m.addamount = nil
}

// Amount returns the amount value in the mutation.
func (m *RegisterstoreMutation) Amount() (r int, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old amount value of the Registerstore.
// If the Registerstore object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RegisterstoreMutation) OldAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAmount is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds i to amount.
func (m *RegisterstoreMutation) AddAmount(i int) {
	if m.addamount != nil {
		*m.addamount += i
	} else {
		m.addamount = &i
	}
}

// AddedAmount returns the value that was added to the amount field in this mutation.
func (m *RegisterstoreMutation) AddedAmount() (r int, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount reset all changes of the "amount" field.
func (m *RegisterstoreMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetStoreID sets the store edge to Store by id.
func (m *RegisterstoreMutation) SetStoreID(id int) {
	m.store = &id
}

// ClearStore clears the store edge to Store.
func (m *RegisterstoreMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared returns if the edge store was cleared.
func (m *RegisterstoreMutation) StoreCleared() bool {
	return m.clearedstore
}

// StoreID returns the store id in the mutation.
func (m *RegisterstoreMutation) StoreID() (id int, exists bool) {
	if m.store != nil {
		return *m.store, true
	}
	return
}

// StoreIDs returns the store ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *RegisterstoreMutation) StoreIDs() (ids []int) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore reset all changes of the "store" edge.
func (m *RegisterstoreMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// SetUserID sets the user edge to User by id.
func (m *RegisterstoreMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *RegisterstoreMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *RegisterstoreMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *RegisterstoreMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RegisterstoreMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *RegisterstoreMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetDrugID sets the drug edge to Drug by id.
func (m *RegisterstoreMutation) SetDrugID(id int) {
	m.drug = &id
}

// ClearDrug clears the drug edge to Drug.
func (m *RegisterstoreMutation) ClearDrug() {
	m.cleareddrug = true
}

// DrugCleared returns if the edge drug was cleared.
func (m *RegisterstoreMutation) DrugCleared() bool {
	return m.cleareddrug
}

// DrugID returns the drug id in the mutation.
func (m *RegisterstoreMutation) DrugID() (id int, exists bool) {
	if m.drug != nil {
		return *m.drug, true
	}
	return
}

// DrugIDs returns the drug ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DrugID instead. It exists only for internal usage by the builders.
func (m *RegisterstoreMutation) DrugIDs() (ids []int) {
	if id := m.drug; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDrug reset all changes of the "drug" edge.
func (m *RegisterstoreMutation) ResetDrug() {
	m.drug = nil
	m.cleareddrug = false
}

// Op returns the operation name.
func (m *RegisterstoreMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Registerstore).
func (m *RegisterstoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RegisterstoreMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.amount != nil {
		fields = append(fields, registerstore.FieldAmount)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RegisterstoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case registerstore.FieldAmount:
		return m.Amount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RegisterstoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case registerstore.FieldAmount:
		return m.OldAmount(ctx)
	}
	return nil, fmt.Errorf("unknown Registerstore field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RegisterstoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case registerstore.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Registerstore field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RegisterstoreMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, registerstore.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RegisterstoreMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case registerstore.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RegisterstoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	case registerstore.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Registerstore numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RegisterstoreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RegisterstoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RegisterstoreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Registerstore nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RegisterstoreMutation) ResetField(name string) error {
	switch name {
	case registerstore.FieldAmount:
		m.ResetAmount()
		return nil
	}
	return fmt.Errorf("unknown Registerstore field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RegisterstoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.store != nil {
		edges = append(edges, registerstore.EdgeStore)
	}
	if m.user != nil {
		edges = append(edges, registerstore.EdgeUser)
	}
	if m.drug != nil {
		edges = append(edges, registerstore.EdgeDrug)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RegisterstoreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case registerstore.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	case registerstore.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case registerstore.EdgeDrug:
		if id := m.drug; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RegisterstoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RegisterstoreMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RegisterstoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedstore {
		edges = append(edges, registerstore.EdgeStore)
	}
	if m.cleareduser {
		edges = append(edges, registerstore.EdgeUser)
	}
	if m.cleareddrug {
		edges = append(edges, registerstore.EdgeDrug)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RegisterstoreMutation) EdgeCleared(name string) bool {
	switch name {
	case registerstore.EdgeStore:
		return m.clearedstore
	case registerstore.EdgeUser:
		return m.cleareduser
	case registerstore.EdgeDrug:
		return m.cleareddrug
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RegisterstoreMutation) ClearEdge(name string) error {
	switch name {
	case registerstore.EdgeStore:
		m.ClearStore()
		return nil
	case registerstore.EdgeUser:
		m.ClearUser()
		return nil
	case registerstore.EdgeDrug:
		m.ClearDrug()
		return nil
	}
	return fmt.Errorf("unknown Registerstore unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RegisterstoreMutation) ResetEdge(name string) error {
	switch name {
	case registerstore.EdgeStore:
		m.ResetStore()
		return nil
	case registerstore.EdgeUser:
		m.ResetUser()
		return nil
	case registerstore.EdgeDrug:
		m.ResetDrug()
		return nil
	}
	return fmt.Errorf("unknown Registerstore edge %s", name)
}

// StoreMutation represents an operation that mutate the Stores
// nodes in the graph.
type StoreMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	stores        map[int]struct{}
	removedstores map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Store, error)
}

var _ ent.Mutation = (*StoreMutation)(nil)

// storeOption allows to manage the mutation configuration using functional options.
type storeOption func(*StoreMutation)

// newStoreMutation creates new mutation for $n.Name.
func newStoreMutation(c config, op Op, opts ...storeOption) *StoreMutation {
	m := &StoreMutation{
		config:        c,
		op:            op,
		typ:           TypeStore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStoreID sets the id field of the mutation.
func withStoreID(id int) storeOption {
	return func(m *StoreMutation) {
		var (
			err   error
			once  sync.Once
			value *Store
		)
		m.oldValue = func(ctx context.Context) (*Store, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Store.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStore sets the old Store of the mutation.
func withStore(node *Store) storeOption {
	return func(m *StoreMutation) {
		m.oldValue = func(context.Context) (*Store, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *StoreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *StoreMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *StoreMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Store.
// If the Store object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *StoreMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *StoreMutation) ResetName() {
	m.name = nil
}

// AddStoreIDs adds the stores edge to Registerstore by ids.
func (m *StoreMutation) AddStoreIDs(ids ...int) {
	if m.stores == nil {
		m.stores = make(map[int]struct{})
	}
	for i := range ids {
		m.stores[ids[i]] = struct{}{}
	}
}

// RemoveStoreIDs removes the stores edge to Registerstore by ids.
func (m *StoreMutation) RemoveStoreIDs(ids ...int) {
	if m.removedstores == nil {
		m.removedstores = make(map[int]struct{})
	}
	for i := range ids {
		m.removedstores[ids[i]] = struct{}{}
	}
}

// RemovedStores returns the removed ids of stores.
func (m *StoreMutation) RemovedStoresIDs() (ids []int) {
	for id := range m.removedstores {
		ids = append(ids, id)
	}
	return
}

// StoresIDs returns the stores ids in the mutation.
func (m *StoreMutation) StoresIDs() (ids []int) {
	for id := range m.stores {
		ids = append(ids, id)
	}
	return
}

// ResetStores reset all changes of the "stores" edge.
func (m *StoreMutation) ResetStores() {
	m.stores = nil
	m.removedstores = nil
}

// Op returns the operation name.
func (m *StoreMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Store).
func (m *StoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *StoreMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, store.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *StoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case store.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *StoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case store.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Store field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case store.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Store field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *StoreMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *StoreMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Store numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *StoreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *StoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *StoreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Store nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *StoreMutation) ResetField(name string) error {
	switch name {
	case store.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Store field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *StoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.stores != nil {
		edges = append(edges, store.EdgeStores)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *StoreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case store.EdgeStores:
		ids := make([]ent.Value, 0, len(m.stores))
		for id := range m.stores {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *StoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstores != nil {
		edges = append(edges, store.EdgeStores)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *StoreMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case store.EdgeStores:
		ids := make([]ent.Value, 0, len(m.removedstores))
		for id := range m.removedstores {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *StoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *StoreMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *StoreMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Store unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *StoreMutation) ResetEdge(name string) error {
	switch name {
	case store.EdgeStores:
		m.ResetStores()
		return nil
	}
	return fmt.Errorf("unknown Store edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	email         *string
	name          *string
	password      *string
	clearedFields map[string]struct{}
	users         map[int]struct{}
	removedusers  map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetName sets the name field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPassword sets the password field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddUserIDs adds the users edge to Registerstore by ids.
func (m *UserMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// RemoveUserIDs removes the users edge to Registerstore by ids.
func (m *UserMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed ids of users.
func (m *UserMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the users ids in the mutation.
func (m *UserMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers reset all changes of the "users" edge.
func (m *UserMutation) ResetUsers() {
	m.users = nil
	m.removedusers = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldName:
		return m.Name()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.users != nil {
		edges = append(edges, user.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedusers != nil {
		edges = append(edges, user.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
