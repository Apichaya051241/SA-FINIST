/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntDrug,
    EntDrugFromJSON,
    EntDrugToJSON,
    EntRegisterstore,
    EntRegisterstoreFromJSON,
    EntRegisterstoreToJSON,
    EntStore,
    EntStoreFromJSON,
    EntStoreToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateDrugRequest {
    drug: EntDrug;
}

export interface CreateRegisterstoreRequest {
    registerstore: EntRegisterstore;
}

export interface CreateStoreRequest {
    store: EntStore;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteRegisterstoreRequest {
    id: number;
}

export interface GetDrugRequest {
    id: number;
}

export interface GetRegisterstoreRequest {
    id: number;
}

export interface GetStoreRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListDrugRequest {
    limit?: number;
    offset?: number;
}

export interface ListRegisterstoreRequest {
    limit?: number;
    offset?: number;
}

export interface ListStoreRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateRegisterstoreRequest {
    id: number;
    registerstore: EntRegisterstore;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create drug
     * Create drug
     */
    async createDrugRaw(requestParameters: CreateDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.drug === null || requestParameters.drug === undefined) {
            throw new runtime.RequiredError('drug','Required parameter requestParameters.drug was null or undefined when calling createDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drugs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDrugToJSON(requestParameters.drug),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * Create drug
     * Create drug
     */
    async createDrug(requestParameters: CreateDrugRequest): Promise<EntDrug> {
        const response = await this.createDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create registerstore
     * Create registerstore
     */
    async createRegisterstoreRaw(requestParameters: CreateRegisterstoreRequest): Promise<runtime.ApiResponse<EntRegisterstore>> {
        if (requestParameters.registerstore === null || requestParameters.registerstore === undefined) {
            throw new runtime.RequiredError('registerstore','Required parameter requestParameters.registerstore was null or undefined when calling createRegisterstore.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/registerstores`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRegisterstoreToJSON(requestParameters.registerstore),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRegisterstoreFromJSON(jsonValue));
    }

    /**
     * Create registerstore
     * Create registerstore
     */
    async createRegisterstore(requestParameters: CreateRegisterstoreRequest): Promise<EntRegisterstore> {
        const response = await this.createRegisterstoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create store
     * Create store
     */
    async createStoreRaw(requestParameters: CreateStoreRequest): Promise<runtime.ApiResponse<EntStore>> {
        if (requestParameters.store === null || requestParameters.store === undefined) {
            throw new runtime.RequiredError('store','Required parameter requestParameters.store was null or undefined when calling createStore.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/stores`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStoreToJSON(requestParameters.store),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStoreFromJSON(jsonValue));
    }

    /**
     * Create store
     * Create store
     */
    async createStore(requestParameters: CreateStoreRequest): Promise<EntStore> {
        const response = await this.createStoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get registerstore by ID
     * Delete a registerstore entity by ID
     */
    async deleteRegisterstoreRaw(requestParameters: DeleteRegisterstoreRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRegisterstore.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/registerstores/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get registerstore by ID
     * Delete a registerstore entity by ID
     */
    async deleteRegisterstore(requestParameters: DeleteRegisterstoreRequest): Promise<object> {
        const response = await this.deleteRegisterstoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * get drug by ID
     * Get a drug entity by ID
     */
    async getDrugRaw(requestParameters: GetDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * get drug by ID
     * Get a drug entity by ID
     */
    async getDrug(requestParameters: GetDrugRequest): Promise<EntDrug> {
        const response = await this.getDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * get registerstore by ID
     * Get a registerstore entity by ID
     */
    async getRegisterstoreRaw(requestParameters: GetRegisterstoreRequest): Promise<runtime.ApiResponse<EntRegisterstore>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRegisterstore.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/registerstores/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRegisterstoreFromJSON(jsonValue));
    }

    /**
     * get registerstore by ID
     * Get a registerstore entity by ID
     */
    async getRegisterstore(requestParameters: GetRegisterstoreRequest): Promise<EntRegisterstore> {
        const response = await this.getRegisterstoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * get store by ID
     * Get a store entity by ID
     */
    async getStoreRaw(requestParameters: GetStoreRequest): Promise<runtime.ApiResponse<EntStore>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStore.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stores/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStoreFromJSON(jsonValue));
    }

    /**
     * get store by ID
     * Get a store entity by ID
     */
    async getStore(requestParameters: GetStoreRequest): Promise<EntStore> {
        const response = await this.getStoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list drug entities
     * List drug entities
     */
    async listDrugRaw(requestParameters: ListDrugRequest): Promise<runtime.ApiResponse<Array<EntDrug>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDrugFromJSON));
    }

    /**
     * list drug entities
     * List drug entities
     */
    async listDrug(requestParameters: ListDrugRequest): Promise<Array<EntDrug>> {
        const response = await this.listDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * list registerstore entities
     * List registerstore entities
     */
    async listRegisterstoreRaw(requestParameters: ListRegisterstoreRequest): Promise<runtime.ApiResponse<Array<EntRegisterstore>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/registerstores`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRegisterstoreFromJSON));
    }

    /**
     * list registerstore entities
     * List registerstore entities
     */
    async listRegisterstore(requestParameters: ListRegisterstoreRequest): Promise<Array<EntRegisterstore>> {
        const response = await this.listRegisterstoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * list store entities
     * List store entities
     */
    async listStoreRaw(requestParameters: ListStoreRequest): Promise<runtime.ApiResponse<Array<EntStore>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stores`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStoreFromJSON));
    }

    /**
     * list store entities
     * List store entities
     */
    async listStore(requestParameters: ListStoreRequest): Promise<Array<EntStore>> {
        const response = await this.listStoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update registerstore by ID
     * Update a registerstore entity by ID
     */
    async updateRegisterstoreRaw(requestParameters: UpdateRegisterstoreRequest): Promise<runtime.ApiResponse<EntRegisterstore>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRegisterstore.');
        }

        if (requestParameters.registerstore === null || requestParameters.registerstore === undefined) {
            throw new runtime.RequiredError('registerstore','Required parameter requestParameters.registerstore was null or undefined when calling updateRegisterstore.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/registerstores/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRegisterstoreToJSON(requestParameters.registerstore),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRegisterstoreFromJSON(jsonValue));
    }

    /**
     * update registerstore by ID
     * Update a registerstore entity by ID
     */
    async updateRegisterstore(requestParameters: UpdateRegisterstoreRequest): Promise<EntRegisterstore> {
        const response = await this.updateRegisterstoreRaw(requestParameters);
        return await response.value();
    }

}
